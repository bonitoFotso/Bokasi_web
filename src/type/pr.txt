from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver


from django.db import models
from django.contrib.auth.models import AbstractUser
from django.utils.translation import gettext_lazy as _
from .managers import EmailUserManager  # Assurez-vous d'importer votre gestionnaire personnalisé

class User(AbstractUser):
    """Utilisateur personnalisé avec email comme identifiant principal"""
    username = models.CharField(max_length=30, blank=True, null=True)
    email = models.EmailField(_('email address'), unique=True)
    
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = []
    
    objects = EmailUserManager()
    
    def __str__(self):
        return self.email


class UserProfile(models.Model):
    """Profil étendu pour stocker des informations supplémentaires sur l'utilisateur"""
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')
    # Préférences d'interface
    dark_mode = models.BooleanField(default=False)
    # Préférences de notification
    email_notifications = models.BooleanField(default=True)
    push_notifications = models.BooleanField(default=True)
    # Fuseau horaire pour les rappels
    timezone = models.CharField(max_length=50, default='Europe/Paris')
    # Langue préférée
    language = models.CharField(max_length=10, default='fr')
    # Statistiques utilisateur
    date_joined = models.DateTimeField(auto_now_add=True)
    last_login_ip = models.GenericIPAddressField(null=True, blank=True)
    streak_record = models.IntegerField(default=0)  # Record de jours consécutifs
    # Avatar et personnalisation
    avatar = models.ImageField(upload_to='avatars/', null=True, blank=True)
    bio = models.TextField(blank=True)

    def __str__(self):
        return f"Profil de {self.user.email}"


@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    """Crée automatiquement un profil lorsqu'un utilisateur est créé"""
    if created:
        UserProfile.objects.create(user=instance)


@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    """Sauvegarde le profil lorsque l'utilisateur est sauvegardé"""
    instance.profile.save()
    from rest_framework import serializers
from django.contrib.auth.password_validation import validate_password
from .models import User, UserProfile


class UserProfileSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserProfile
        fields = [
            'dark_mode', 'email_notifications', 'push_notifications',
            'timezone', 'language', 'date_joined', 'streak_record',
            'avatar', 'bio'
        ]


class UserSerializer(serializers.ModelSerializer):
    profile = UserProfileSerializer(required=False)
    
    class Meta:
        model = User
        fields = ['id', 'username', 'email', 'first_name', 'last_name', 'profile']
        read_only_fields = ['id']
    
    def update(self, instance, validated_data):
        """Mise à jour de l'utilisateur et du profil associé"""
        profile_data = validated_data.pop('profile', None)
        
        # Mise à jour des champs utilisateur
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()
        
        # Mise à jour du profil si des données sont fournies
        if profile_data:
            for attr, value in profile_data.items():
                setattr(instance.profile, attr, value)
            instance.profile.save()
            
        return instance


class RegisterSerializer(serializers.ModelSerializer):
    """Sérialiseur pour l'inscription d'un nouvel utilisateur"""
    
    email = serializers.EmailField(required=True)
    password = serializers.CharField(
        write_only=True, required=True, validators=[validate_password]
    )
    password2 = serializers.CharField(write_only=True, required=True)
    
    class Meta:
        model = User
        fields = ['username', 'email', 'password', 'password2', 'first_name', 'last_name']
    
    def validate(self, attrs):
        """Validation des mots de passe et de l'email"""
        if attrs['password'] != attrs['password2']:
            raise serializers.ValidationError({"password": "Les mots de passe ne correspondent pas."})
        
        if User.objects.filter(email=attrs['email']).exists():
            raise serializers.ValidationError({"email": "Cet email est déjà utilisé."})
            
        return attrs
    
    def create(self, validated_data):
        """Création d'un nouvel utilisateur"""
        validated_data.pop('password2')  # Supprime password2 avant de créer l'utilisateur
        
        user = User.objects.create(
            username=validated_data['username'],
            email=validated_data['email'],
            first_name=validated_data.get('first_name', ''),
            last_name=validated_data.get('last_name', '')
        )
        
        user.set_password(validated_data['password'])
        user.save()
        
        return user


class ChangePasswordSerializer(serializers.Serializer):
    """Sérialiseur pour changer le mot de passe"""
    
    old_password = serializers.CharField(required=True)
    new_password = serializers.CharField(required=True, validators=[validate_password])
    new_password2 = serializers.CharField(required=True)
    
    def validate(self, attrs):
        """Validation des nouveaux mots de passe"""
        if attrs['new_password'] != attrs['new_password2']:
            raise serializers.ValidationError({"new_password": "Les nouveaux mots de passe ne correspondent pas."})
        return attrs


class EmailVerificationSerializer(serializers.Serializer):
    """Sérialiseur pour vérifier l'email de l'utilisateur"""
    token = serializers.CharField()

    from rest_framework import generics, status, permissions
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.decorators import action
from rest_framework.viewsets import ModelViewSet
from django.contrib.auth import authenticate
from django.utils import timezone
from django.conf import settings
from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
from django.utils.encoding import force_bytes, force_str
from django.contrib.auth.tokens import default_token_generator
from django.contrib.auth.password_validation import validate_password
from rest_framework_simplejwt.tokens import RefreshToken
from .serializers import (
    UserSerializer, RegisterSerializer, ChangePasswordSerializer,
    EmailVerificationSerializer
)
from .models import UserProfile,User

# views.py
from django.http import JsonResponse
from django.views.decorators.csrf import ensure_csrf_cookie

@ensure_csrf_cookie
def get_csrf_token(request):
    return JsonResponse({"detail": "CSRF cookie set"})


class RegisterView(generics.CreateAPIView):
    """Vue pour l'inscription des utilisateurs"""
    
    queryset = User.objects.all()
    #permission_classes = [permissions.AllowUnAuthenticated]
    serializer_class = RegisterSerializer
    
    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.save()
        
        # Génération des tokens JWT
        refresh = RefreshToken.for_user(user)
        
        # Envoi d'un email de confirmation
        self.send_confirmation_email(user)
        
        return Response({
            "user": UserSerializer(user, context=self.get_serializer_context()).data,
            "refresh": str(refresh),
            "access": str(refresh.access_token),
            "message": "Utilisateur créé avec succès. Un email de confirmation a été envoyé."
        }, status=status.HTTP_201_CREATED)
    
    def send_confirmation_email(self, user):
        """Envoie un email de confirmation à l'utilisateur"""
        token = default_token_generator.make_token(user)
        uid = urlsafe_base64_encode(force_bytes(user.pk))
        
        verification_link = f"{settings.FRONTEND_URL}/verify-email/{uid}/{token}/"
        
        context = {
            'user': user,
            'verification_link': verification_link
        }
        
        email_html_message = render_to_string('email/email_verification.html', context)
        email_plaintext_message = render_to_string('email/email_verification.txt', context)
        
        try:
            send_mail(
                subject="Vérifiez votre adresse email",
                message=email_plaintext_message,
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[user.email],
                html_message=email_html_message,
                fail_silently=False,
            )
        except Exception as e:
            print(f"Erreur lors de l'envoi de l'email: {e}")


class VerifyEmailView(APIView):
    """Vue pour vérifier l'email de l'utilisateur"""
    
    permission_classes = [permissions.AllowAny]
    serializer_class = EmailVerificationSerializer
    
    def post(self, request):
        serializer = self.serializer_class(data=request.data)
        serializer.is_valid(raise_exception=True)
        
        try:
            uid = urlsafe_base64_decode(request.data.get('uid'))
            user = User.objects.get(pk=force_str(uid))
            token = request.data.get('token')
            
            if default_token_generator.check_token(user, token):
                user.is_active = True
                user.save()
                return Response(
                    {"message": "Email vérifié avec succès"},
                    status=status.HTTP_200_OK
                )
            return Response(
                {"error": "Token invalide"},
                status=status.HTTP_400_BAD_REQUEST
            )
        except Exception as e:
            return Response(
                {"error": f"Erreur lors de la vérification: {str(e)}"},
                status=status.HTTP_400_BAD_REQUEST
            )
#import logging
#logger = logging.getLogger(__name__)

class LoginView(APIView):
    """Vue pour la connexion des utilisateurs"""
    
    #permission_classes = [permissions.AllowAny]
    
    def post(self, request):
        username = request.data.get('email')
        password = request.data.get('password')
        #logger.debug(f"Données de connexion reçues: email={username}, password={'*' * len(password if password else '')}")
        #logger.debug(f"Headers reçus: {request.headers}")
        
        user = authenticate(username=username, password=password)
        
        if user:
            # Mise à jour de la date de dernière connexion
            user.last_login = timezone.now()
            
            # Enregistrement de l'adresse IP si fournie
            if 'HTTP_X_FORWARDED_FOR' in request.META:
                user.profile.last_login_ip = request.META['HTTP_X_FORWARDED_FOR'].split(',')[0]
            elif 'REMOTE_ADDR' in request.META:
                user.profile.last_login_ip = request.META['REMOTE_ADDR']
                
            user.save()
            
            # Génération des tokens JWT
            refresh = RefreshToken.for_user(user)
            
            return Response({
                "user": UserSerializer(user).data,
                "refresh": str(refresh),
                "access": str(refresh.access_token),
            })
        else:
            return Response(
                {"error": "Identifiants invalides"},
                status=status.HTTP_401_UNAUTHORIZED
            )


class ChangePasswordView(generics.UpdateAPIView):
    """Vue pour changer le mot de passe"""
    
    serializer_class = ChangePasswordSerializer
    permission_classes = [permissions.IsAuthenticated]
    
    def update(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        
        user = request.user
        
        # Vérifier l'ancien mot de passe
        if not user.check_password(serializer.validated_data['old_password']):
            return Response(
                {"old_password": ["Mot de passe incorrect"]},
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # Définir le nouveau mot de passe
        user.set_password(serializer.validated_data['new_password'])
        user.save()
        
        return Response(
            {"message": "Mot de passe modifié avec succès"},
            status=status.HTTP_200_OK
        )


class ForgotPasswordView(APIView):
    """Vue pour réinitialiser le mot de passe"""
    
    permission_classes = [permissions.AllowAny]
    
    def post(self, request):
        email = request.data.get('email')
        
        try:
            user = User.objects.get(email=email)
            
            # Génération du token de réinitialisation
            token = default_token_generator.make_token(user)
            uid = urlsafe_base64_encode(force_bytes(user.pk))
            
            reset_link = f"{settings.FRONTEND_URL}/reset-password/{uid}/{token}/"
            
            context = {
                'user': user,
                'reset_link': reset_link
            }
            
            email_html_message = render_to_string('email/password_reset.html', context)
            email_plaintext_message = render_to_string('email/password_reset.txt', context)
            
            send_mail(
                subject="Réinitialisation de votre mot de passe",
                message=email_plaintext_message,
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[user.email],
                html_message=email_html_message,
                fail_silently=False,
            )
            
            return Response(
                {"message": "Instructions de réinitialisation envoyées à votre email"},
                status=status.HTTP_200_OK
            )
        except User.DoesNotExist:
            # Pour des raisons de sécurité, ne pas révéler si l'email existe
            return Response(
                {"message": "Si cet email existe, les instructions de réinitialisation ont été envoyées"},
                status=status.HTTP_200_OK
            )
        except Exception as e:
            return Response(
                {"error": f"Erreur lors de l'envoi de l'email: {str(e)}"},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


class ResetPasswordView(APIView):
    """Vue pour définir un nouveau mot de passe après réinitialisation"""
    
    permission_classes = [permissions.AllowAny]
    
    def post(self, request):
        try:
            uid = urlsafe_base64_decode(request.data.get('uid'))
            user = User.objects.get(pk=force_str(uid))
            token = request.data.get('token')
            new_password = request.data.get('new_password')
            
            if default_token_generator.check_token(user, token):
                # Validation du nouveau mot de passe
                validate_password(new_password)
                
                user.set_password(new_password)
                user.save()
                
                return Response(
                    {"message": "Mot de passe réinitialisé avec succès"},
                    status=status.HTTP_200_OK
                )
            return Response(
                {"error": "Token invalide ou expiré"},
                status=status.HTTP_400_BAD_REQUEST
            )
        except Exception as e:
            return Response(
                {"error": f"Erreur lors de la réinitialisation: {str(e)}"},
                status=status.HTTP_400_BAD_REQUEST
            )


class UserViewSet(ModelViewSet):
    """ViewSet pour la gestion du profil utilisateur"""
    
    serializer_class = UserSerializer
    permission_classes = [permissions.IsAuthenticated]
    
    def get_queryset(self):
        """Renvoie uniquement l'utilisateur connecté"""
        return User.objects.filter(id=self.request.user.id)
    
    def get_object(self):
        """Retourne toujours l'utilisateur authentifié"""
        return self.request.user
    
    @action(detail=False, methods=['get'])
    def me(self, request):
        """Endpoint pour récupérer les informations de l'utilisateur connecté"""
        serializer = self.get_serializer(request.user)
        return Response(serializer.data)
    
    @action(detail=False, methods=['patch'])
    def update_profile(self, request):
        """Endpoint pour mettre à jour le profil utilisateur"""
        serializer = self.get_serializer(request.user, data=request.data, partial=True)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        return Response(serializer.data)
    
    @action(detail=False, methods=['delete'])
    def delete_account(self, request):
        """Endpoint pour supprimer le compte utilisateur"""
        user = request.user
        user.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)
        